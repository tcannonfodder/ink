{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ink Runtime Specification Note: This version of the specification is based on version 1.0.0 of ink: https://github.com/inkle/ink/releases/tag/v1.0.0 Explanation how the runtime is structured General documentation Architecture Glossary In action Runtime implementation State saving and restoration Reference Tables ByteCode reference Native functions Control commands","title":"Ink Runtime Specification"},{"location":"#ink-runtime-specification","text":"Note: This version of the specification is based on version 1.0.0 of ink: https://github.com/inkle/ink/releases/tag/v1.0.0 Explanation how the runtime is structured","title":"Ink Runtime Specification"},{"location":"#general-documentation","text":"Architecture Glossary","title":"General documentation"},{"location":"#in-action","text":"Runtime implementation State saving and restoration","title":"In action"},{"location":"#reference-tables","text":"ByteCode reference Native functions Control commands","title":"Reference Tables"},{"location":"architecture/","text":"Architecture High-level explanation of the runtime architecture The general form of a compiled JSON story is an object that must contain : inkVersion : number : the ink version number. Current version is 20 . root : array : the main story Container listDef : object (optional): a ListDefinition The minimal compiled ink story : (corresponding to an empty file) { \"inkVersion\":20, \"root\":[[[\"done\",{\"#n\":\"g-0\"}],null],\"done\",null], \"listDefs\":{} }","title":"Architecture"},{"location":"architecture/#architecture","text":"High-level explanation of the runtime architecture The general form of a compiled JSON story is an object that must contain : inkVersion : number : the ink version number. Current version is 20 . root : array : the main story Container listDef : object (optional): a ListDefinition The minimal compiled ink story : (corresponding to an empty file) { \"inkVersion\":20, \"root\":[[[\"done\",{\"#n\":\"g-0\"}],null],\"done\",null], \"listDefs\":{} }","title":"Architecture"},{"location":"bytecode-reference/","text":"Compiled JSON reference Glossary & Examples of each type of object & instructions the ink compiler will generate The root container should be parsed as a tree and each element interpreted as follow : (see Glossary for definitions) any number or boolean is a Value . any string that begins with a ^ is a StringValue . The initial ^ should be ignored. the special string <> is a Glue . strings matching exactly a Control Command is such. strings matching exactly a Native Function Call is such. Exception : L^ matches ^ (list intersect/has operation) \"void\" is the special Value Void TODO : named/flagged content any array is a Container to be parsed recursively. any null is kept as is.","title":"Compiled JSON reference"},{"location":"bytecode-reference/#compiled-json-reference","text":"Glossary & Examples of each type of object & instructions the ink compiler will generate The root container should be parsed as a tree and each element interpreted as follow : (see Glossary for definitions) any number or boolean is a Value . any string that begins with a ^ is a StringValue . The initial ^ should be ignored. the special string <> is a Glue . strings matching exactly a Control Command is such. strings matching exactly a Native Function Call is such. Exception : L^ matches ^ (list intersect/has operation) \"void\" is the special Value Void TODO : named/flagged content any array is a Container to be parsed recursively. any null is kept as is.","title":"Compiled JSON reference"},{"location":"control-commands/","text":"Control Commands ev : EvalStart out : EvalOutput /ev : EvalEnd du : Duplicate pop : PopEvaluatedValue ~ret : PopFunction ->-> : PopTunnel str : BeginString /str : EndString nop : NoOp choiceCnt : ChoiceCount turn : Turns turs : TurnsSince readc : ReadCount rnd : Random srnd : SeedRandom visit : VisitIndex seq : SequenceShuffleIndex thread : StartThread done : Done end : End listInt : ListFromInt range : ListRange lrnd : ListRandom","title":"Control Commands"},{"location":"control-commands/#control-commands","text":"ev : EvalStart out : EvalOutput /ev : EvalEnd du : Duplicate pop : PopEvaluatedValue ~ret : PopFunction ->-> : PopTunnel str : BeginString /str : EndString nop : NoOp choiceCnt : ChoiceCount turn : Turns turs : TurnsSince readc : ReadCount rnd : Random srnd : SeedRandom visit : VisitIndex seq : SequenceShuffleIndex thread : StartThread done : Done end : End listInt : ListFromInt range : ListRange lrnd : ListRandom","title":"Control Commands"},{"location":"diverts/","text":"Runtime Diverts The different type of diverts","title":"Runtime Diverts"},{"location":"diverts/#runtime-diverts","text":"The different type of diverts","title":"Runtime Diverts"},{"location":"glossary/","text":"Glossary A glossary of terms used by the runtime Container : the base element of JSON compiled stories. A Container may be named . A Container may contain other Containers (named or anonymous). Control Command : a built-in instruction destined to be read and executed by the interpreter. See Control Commands Choice Point : the generator for a single choice. Its content (text) and behaviour are defined at runtime Divert : a generalisation of the divert concept found in ink source. See Type of Diverts Glue : an invisible textual value akin to an unbreakable space List : what exactly is a LIST is an open question fairly debated on the community discord. List item : Lists \"contain\" List items. Native Function Call : an operation performed internally on behalf of the interpreter. See Native functions StringValue : a textual value Value : a integer, float or boolean value. In the context of a boolean operation, any non-zero value is considered truthy. Variable : a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary. See Variable Assignment Void : a special Value returned by function calls that don't return anything","title":"Glossary"},{"location":"glossary/#glossary","text":"A glossary of terms used by the runtime Container : the base element of JSON compiled stories. A Container may be named . A Container may contain other Containers (named or anonymous). Control Command : a built-in instruction destined to be read and executed by the interpreter. See Control Commands Choice Point : the generator for a single choice. Its content (text) and behaviour are defined at runtime Divert : a generalisation of the divert concept found in ink source. See Type of Diverts Glue : an invisible textual value akin to an unbreakable space List : what exactly is a LIST is an open question fairly debated on the community discord. List item : Lists \"contain\" List items. Native Function Call : an operation performed internally on behalf of the interpreter. See Native functions StringValue : a textual value Value : a integer, float or boolean value. In the context of a boolean operation, any non-zero value is considered truthy. Variable : a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary. See Variable Assignment Void : a special Value returned by function calls that don't return anything","title":"Glossary"},{"location":"lists/","text":"Lists Using List & ListItem in clients List & List items are available for a game engine to interact with. In order to facilitate this, the GetHashCode method is provided. 1 List GetHashCode : returns an integer hashcode for a List , used for comparisons and dictionary use. The hashcode should take into account the ListItem s inside the List ListItem GetHashCode : returns an integer hashcode for the ListItem . The hashcode should take into account the itemName , and the originName (if present). This method returns a Hashable representation of the List & ListItem . The details of the hash are platform-specific ; meaning that runtime engines can implement the method however works best for the programming language/ecosystem. However, the GetHashCode methods should return a hashcode calculated by See commit: https://github.com/inkle/ink/commit/b4ce27b70183c5466cb7a19a69e6bfcc075873db \u21a9","title":"Lists"},{"location":"lists/#lists","text":"","title":"Lists"},{"location":"lists/#using-list-listitem-in-clients","text":"List & List items are available for a game engine to interact with. In order to facilitate this, the GetHashCode method is provided. 1","title":"Using List &amp; ListItem in clients"},{"location":"lists/#list","text":"GetHashCode : returns an integer hashcode for a List , used for comparisons and dictionary use. The hashcode should take into account the ListItem s inside the List","title":"List"},{"location":"lists/#listitem","text":"GetHashCode : returns an integer hashcode for the ListItem . The hashcode should take into account the itemName , and the originName (if present). This method returns a Hashable representation of the List & ListItem . The details of the hash are platform-specific ; meaning that runtime engines can implement the method however works best for the programming language/ecosystem. However, the GetHashCode methods should return a hashcode calculated by See commit: https://github.com/inkle/ink/commit/b4ce27b70183c5466cb7a19a69e6bfcc075873db \u21a9","title":"ListItem"},{"location":"native-functions/","text":"Native functions Functions call performed internally on behalf of the interpreter Number Operations Binary operations Add Substract Multiply Divide Modulo Power Equal Greater Less Greater Than Or Equal Less Than Or Equal Not Equal Max Min Unary operations Negate Floor Ceil Cast to int Cast to float Boolean Operations All boolean operation may be applied to number where any non-zero value is considered truthy Binary operations And Or Unary operations Not String Operations Binary operations Add (Concat) Equal Not Equal Has Hasnt List Operations Binary operations Add (flip on) Substract (flip off) Has (contains) Hasnt (does not contain) Intersect Equal Not Equal Greater (in the list sense) Less (in the list sense) Greater Than Or Equel (in the list sense) Less Than Or Equel (in the list sense) Unary operations Not (is empty) Invert All Smallest Item Largest Item Count Value (value of the largest item)","title":"Native functions"},{"location":"native-functions/#native-functions","text":"Functions call performed internally on behalf of the interpreter","title":"Native functions"},{"location":"native-functions/#number-operations","text":"","title":"Number Operations"},{"location":"native-functions/#binary-operations","text":"Add Substract Multiply Divide Modulo Power Equal Greater Less Greater Than Or Equal Less Than Or Equal Not Equal Max Min","title":"Binary operations"},{"location":"native-functions/#unary-operations","text":"Negate Floor Ceil Cast to int Cast to float","title":"Unary operations"},{"location":"native-functions/#boolean-operations","text":"All boolean operation may be applied to number where any non-zero value is considered truthy","title":"Boolean Operations"},{"location":"native-functions/#binary-operations_1","text":"And Or","title":"Binary operations"},{"location":"native-functions/#unary-operations_1","text":"Not","title":"Unary operations"},{"location":"native-functions/#string-operations","text":"","title":"String Operations"},{"location":"native-functions/#binary-operations_2","text":"Add (Concat) Equal Not Equal Has Hasnt","title":"Binary operations"},{"location":"native-functions/#list-operations","text":"","title":"List Operations"},{"location":"native-functions/#binary-operations_3","text":"Add (flip on) Substract (flip off) Has (contains) Hasnt (does not contain) Intersect Equal Not Equal Greater (in the list sense) Less (in the list sense) Greater Than Or Equel (in the list sense) Less Than Or Equel (in the list sense)","title":"Binary operations"},{"location":"native-functions/#unary-operations_2","text":"Not (is empty) Invert All Smallest Item Largest Item Count Value (value of the largest item)","title":"Unary operations"},{"location":"state-saving-and-restoration/","text":"State Saving & Restoration Explanation of how the ink runtime stores the state after each execution","title":"State Saving & Restoration"},{"location":"state-saving-and-restoration/#state-saving-restoration","text":"Explanation of how the ink runtime stores the state after each execution","title":"State Saving &amp; Restoration"},{"location":"testing/","text":"Testing your runtime The community standard for testing a runtime is to use chromy/ink-proof . This tool provides conformance testing for ink runtimes through an easy-to-use web interface & shim structure.","title":"Testing your runtime"},{"location":"testing/#testing-your-runtime","text":"The community standard for testing a runtime is to use chromy/ink-proof . This tool provides conformance testing for ink runtimes through an easy-to-use web interface & shim structure.","title":"Testing your runtime"},{"location":"variables/","text":"Variables a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary.","title":"Variables"},{"location":"variables/#variables","text":"a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary.","title":"Variables"}]}