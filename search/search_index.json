{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ink Runtime Specification Note: This version of the specification is based on version 1.0.0 of ink: https://github.com/inkle/ink/releases/tag/v1.0.0 Explanation how the runtime is structured General documentation Architecture Glossary In action Runtime implementation State saving and restoration Reference Tables ByteCode reference Native functions Control commands","title":"Ink Runtime Specification"},{"location":"#ink-runtime-specification","text":"Note: This version of the specification is based on version 1.0.0 of ink: https://github.com/inkle/ink/releases/tag/v1.0.0 Explanation how the runtime is structured","title":"Ink Runtime Specification"},{"location":"#general-documentation","text":"Architecture Glossary","title":"General documentation"},{"location":"#in-action","text":"Runtime implementation State saving and restoration","title":"In action"},{"location":"#reference-tables","text":"ByteCode reference Native functions Control commands","title":"Reference Tables"},{"location":"architecture/","text":"Architecture High-level explanation of the runtime architecture Architecture Diagram Below is a high-level diagram of how the overall Ink architecture operates, and the scope your runtime implementation covers: The general form of a compiled JSON story is an object that must contain : inkVersion : number : the ink version number. Current version is 20 . root : array : the main story Container listDef : object (optional): a ListDefinition The minimal compiled ink story : (corresponding to an empty file) { \"inkVersion\":20, \"root\":[[[\"done\",{\"#n\":\"g-0\"}],null],\"done\",null], \"listDefs\":{} }","title":"Architecture"},{"location":"architecture/#architecture","text":"High-level explanation of the runtime architecture","title":"Architecture"},{"location":"architecture/#architecture-diagram","text":"Below is a high-level diagram of how the overall Ink architecture operates, and the scope your runtime implementation covers: The general form of a compiled JSON story is an object that must contain : inkVersion : number : the ink version number. Current version is 20 . root : array : the main story Container listDef : object (optional): a ListDefinition The minimal compiled ink story : (corresponding to an empty file) { \"inkVersion\":20, \"root\":[[[\"done\",{\"#n\":\"g-0\"}],null],\"done\",null], \"listDefs\":{} }","title":"Architecture Diagram"},{"location":"bytecode-reference/","text":"Compiled JSON reference Glossary & Examples of each type of object & instructions the ink compiler will generate The root container should be parsed as a tree and each element interpreted as follow : (see Glossary for definitions) any number or boolean is a Value . any string that begins with a ^ is a StringValue . The initial ^ should be ignored. the special string <> is a Glue . strings matching exactly a Control Command is such. strings matching exactly a Native Function Call is such. Exception : L^ matches ^ (list intersect operation) \"void\" is the special Value Void TODO : named/flagged content any array is a Container to be parsed recursively. any null is kept as is.","title":"Compiled JSON reference"},{"location":"bytecode-reference/#compiled-json-reference","text":"Glossary & Examples of each type of object & instructions the ink compiler will generate The root container should be parsed as a tree and each element interpreted as follow : (see Glossary for definitions) any number or boolean is a Value . any string that begins with a ^ is a StringValue . The initial ^ should be ignored. the special string <> is a Glue . strings matching exactly a Control Command is such. strings matching exactly a Native Function Call is such. Exception : L^ matches ^ (list intersect operation) \"void\" is the special Value Void TODO : named/flagged content any array is a Container to be parsed recursively. any null is kept as is.","title":"Compiled JSON reference"},{"location":"control-commands/","text":"Control Commands ev : EvalStart out : EvalOutput /ev : EvalEnd du : Duplicate pop : PopEvaluatedValue ~ret : PopFunction ->-> : PopTunnel str : BeginString /str : EndString nop : NoOp choiceCnt : ChoiceCount turn : Turns turs : TurnsSince readc : ReadCount rnd : Random srnd : SeedRandom visit : VisitIndex seq : SequenceShuffleIndex thread : StartThread done : Done end : End listInt : ListFromInt range : ListRange lrnd : ListRandom","title":"Control Commands"},{"location":"control-commands/#control-commands","text":"ev : EvalStart out : EvalOutput /ev : EvalEnd du : Duplicate pop : PopEvaluatedValue ~ret : PopFunction ->-> : PopTunnel str : BeginString /str : EndString nop : NoOp choiceCnt : ChoiceCount turn : Turns turs : TurnsSince readc : ReadCount rnd : Random srnd : SeedRandom visit : VisitIndex seq : SequenceShuffleIndex thread : StartThread done : Done end : End listInt : ListFromInt range : ListRange lrnd : ListRandom","title":"Control Commands"},{"location":"diverts/","text":"Runtime Diverts The different type of diverts","title":"Runtime Diverts"},{"location":"diverts/#runtime-diverts","text":"The different type of diverts","title":"Runtime Diverts"},{"location":"glossary/","text":"Glossary A glossary of terms used by the runtime Container : the base element of JSON compiled stories. A Container may be named . A Container may contain other Containers (named or anonymous). Control Command : a built-in instruction destined to be read and executed by the interpreter. See Control Commands Choice Point : the generator for a single choice. Its content (text) and behaviour are defined at runtime Divert : a generalisation of the divert concept found in ink source. See Type of Diverts Glue : an invisible textual value akin to an unbreakable space List : what exactly is a LIST is an open question fairly debated on the community discord. List item : Lists \"contain\" List items. Native Function Call : an operation performed internally on behalf of the interpreter. See Native functions StringValue : a textual value Value : a integer, float or boolean value. In the context of a boolean operation, any non-zero value is considered truthy. Variable : a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary. See Variable Assignment Void : a special Value returned by function calls that don't return anything","title":"Glossary"},{"location":"glossary/#glossary","text":"A glossary of terms used by the runtime Container : the base element of JSON compiled stories. A Container may be named . A Container may contain other Containers (named or anonymous). Control Command : a built-in instruction destined to be read and executed by the interpreter. See Control Commands Choice Point : the generator for a single choice. Its content (text) and behaviour are defined at runtime Divert : a generalisation of the divert concept found in ink source. See Type of Diverts Glue : an invisible textual value akin to an unbreakable space List : what exactly is a LIST is an open question fairly debated on the community discord. List item : Lists \"contain\" List items. Native Function Call : an operation performed internally on behalf of the interpreter. See Native functions StringValue : a textual value Value : a integer, float or boolean value. In the context of a boolean operation, any non-zero value is considered truthy. Variable : a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary. See Variable Assignment Void : a special Value returned by function calls that don't return anything","title":"Glossary"},{"location":"lists/","text":"Lists Using List & ListItem in clients List & List items are available for a game engine to interact with. In order to facilitate this, the GetHashCode method is provided. 1 List GetHashCode : returns an integer hashcode for a List , used for comparisons and dictionary use. The hashcode should take into account the ListItem s inside the List ListItem GetHashCode : returns an integer hashcode for the ListItem . The hashcode should take into account the itemName , and the originName (if present). This method returns a Hashable representation of the List & ListItem . The details of the hash are platform-specific ; meaning that runtime engines can implement the method however works best for the programming language/ecosystem. However, the GetHashCode methods should return a hashcode calculated by See commit: https://github.com/inkle/ink/commit/b4ce27b70183c5466cb7a19a69e6bfcc075873db \u21a9","title":"Lists"},{"location":"lists/#lists","text":"","title":"Lists"},{"location":"lists/#using-list-listitem-in-clients","text":"List & List items are available for a game engine to interact with. In order to facilitate this, the GetHashCode method is provided. 1","title":"Using List &amp; ListItem in clients"},{"location":"lists/#list","text":"GetHashCode : returns an integer hashcode for a List , used for comparisons and dictionary use. The hashcode should take into account the ListItem s inside the List","title":"List"},{"location":"lists/#listitem","text":"GetHashCode : returns an integer hashcode for the ListItem . The hashcode should take into account the itemName , and the originName (if present). This method returns a Hashable representation of the List & ListItem . The details of the hash are platform-specific ; meaning that runtime engines can implement the method however works best for the programming language/ecosystem. However, the GetHashCode methods should return a hashcode calculated by See commit: https://github.com/inkle/ink/commit/b4ce27b70183c5466cb7a19a69e6bfcc075873db \u21a9","title":"ListItem"},{"location":"native-functions/","text":"Native functions Functions call performed internally on behalf of the interpreter All function call must be implemented. List of all native functions the number between parenthesis is the function's arity (number of parameters) + Add (2) If both operands are numbers : The return value is the sum. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the sum. If one or both operands are strings : The non-string operand is converted to its string representation (numbers as their decimal representation, true becomes \"true\" and false becomes \"false\" ). The return value is the concatenation of both string. If one of the operands is a List or a List Item It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. The return value is the union of both List. - Subtract (2) If both operands are numbers The return value is the difference between the first and the second. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the difference between the first and the second operand. If one of the operands is a List or a List Item : It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. The return value is the first List with all element from the second removed. Subtract can't be applied to strings / Divide (2) If both operands are numbers : The return value is the division of the first by the second. If one of the two operands is a FLOAT , the result is a FLOAT ; otherwise if the two operands are INT , the result is an INT . Examples: {13 / 3} // 4 {13 / 3.0} // 4.3333335 If both operands are booleans, or if a boolean is added to a number: true is converted to 1 and false to 0 The return value is the division of the first by the second operand. Dividing by zero causes a runtime error . Divide can't be applied to string or Lists * Multiply (2) If both operands are numbers : The return value is the multiplication of the first by the second. If one of the two operands is a FLOAT , the result is a FLOAT ; otherwise if the two operands are INT , the result is an INT . Examples: {13 / (3 * 1)} // 4 {13 / (3 * 1.0)} // 4.3333335 If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the multiplication of the first by the second operand. Multiply can't be applied to string or Lists % Mod (2) If both operands are numbers : The return value is the rest of the euclidean division of the first by the second. If one of the two operands is a FLOAT , the result is a FLOAT ; otherwise if the two operands are INT , the result is an INT . Example: {13 mod 5} // 3 If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the rest of the euclidean division of the first by the second operand. Mod can't be applied to string or Lists _ Negate (1) If the operand is a number : The return value is the opposite of it. If the operand is a FLOAT , the result is a FLOAT ; otherwise if the operand is an INT , the result is an INT . If the operand is a boolean : true is converted to 1 and false to 0 The return value is the opposite of it. Negate can't be applied to string or Lists == Equal (2) != NotEquals (2) If both operands are numbers The return value is a boolean representing whether the first equals the second. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is a boolean representing whether the first equals the second. If one or both operands are strings : The non-string operand is converted to its string representation (numbers as their decimal representation, true becomes \"true\" and false becomes \"false\" ) The return value is the equality between strings. If one of the operands is a List or a List Item : It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. The return value is a boolean that is true if and only if all elements from the first List are in the second List and all elements from the second List are in the first List . NotEquals always returns the inverse of Equals > Greater (2) < Less (2) >= GreaterThanOrEquals (2) <= LessThanOrEquals (2) If both operands are numbers The return value is a boolean representing how the first compares to the second. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is a boolean representing how the first compares to the second. Comparisons can't be applied to strings. If one of the operands is a List or a List Item It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. > is true between Lists if the value of the smallest element of the first List is strictly greater than the value of the biggest element of the second List . >= is true between Lists if the value of the smallest element of the first List is greater or equal than the value of the smallest element of the second List and if the value of the biggest element of the first List is greater or equal than the value of the biggest element of the second List . < is true between Lists if the value of the biggest element of the first List is strictly less than the value the smallest element of the second List . <= is true between Lists if the value of the biggest element of the first List is less or equal than the value of the biggest element of the second List and if the value of the smallest element of the first List is less or equal than the value of the smallest element of the second List . ! Not (1) If the operand is a number : Returns true if its value is not zero. If the operand is a boolean Returns the opposite. If the operand is a List : Returns true if its count is not 0. Not can't be applied to strings. && And (2) || Or (2) All non-boolean operands are first converted to boolean non-zero number, non-empty Lists and non-empty strings are converted to true otherwise to false The return value is the result of the boolean. MIN Min (2) MAX Max (2) POW Pow (2) FLOOR Floor (1) CEILING Ceiling (1) INT Int (1) FLOAT Float (1) ? Has (2) !? Hasn't (2) L^ or ^ Intersect (2) LIST_MIN ListMin (1) LIST_MAX ListMax (1) LIST_ALL All items (1) LIST_COUNT Count (1) LIST_VALUE ValueOfList (1) LIST_INVERT Invert (1)","title":"Native functions"},{"location":"native-functions/#native-functions","text":"Functions call performed internally on behalf of the interpreter All function call must be implemented.","title":"Native functions"},{"location":"native-functions/#list-of-all-native-functions","text":"the number between parenthesis is the function's arity (number of parameters) + Add (2) If both operands are numbers : The return value is the sum. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the sum. If one or both operands are strings : The non-string operand is converted to its string representation (numbers as their decimal representation, true becomes \"true\" and false becomes \"false\" ). The return value is the concatenation of both string. If one of the operands is a List or a List Item It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. The return value is the union of both List. - Subtract (2) If both operands are numbers The return value is the difference between the first and the second. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the difference between the first and the second operand. If one of the operands is a List or a List Item : It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. The return value is the first List with all element from the second removed. Subtract can't be applied to strings / Divide (2) If both operands are numbers : The return value is the division of the first by the second. If one of the two operands is a FLOAT , the result is a FLOAT ; otherwise if the two operands are INT , the result is an INT . Examples: {13 / 3} // 4 {13 / 3.0} // 4.3333335 If both operands are booleans, or if a boolean is added to a number: true is converted to 1 and false to 0 The return value is the division of the first by the second operand. Dividing by zero causes a runtime error . Divide can't be applied to string or Lists * Multiply (2) If both operands are numbers : The return value is the multiplication of the first by the second. If one of the two operands is a FLOAT , the result is a FLOAT ; otherwise if the two operands are INT , the result is an INT . Examples: {13 / (3 * 1)} // 4 {13 / (3 * 1.0)} // 4.3333335 If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the multiplication of the first by the second operand. Multiply can't be applied to string or Lists % Mod (2) If both operands are numbers : The return value is the rest of the euclidean division of the first by the second. If one of the two operands is a FLOAT , the result is a FLOAT ; otherwise if the two operands are INT , the result is an INT . Example: {13 mod 5} // 3 If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is the rest of the euclidean division of the first by the second operand. Mod can't be applied to string or Lists _ Negate (1) If the operand is a number : The return value is the opposite of it. If the operand is a FLOAT , the result is a FLOAT ; otherwise if the operand is an INT , the result is an INT . If the operand is a boolean : true is converted to 1 and false to 0 The return value is the opposite of it. Negate can't be applied to string or Lists == Equal (2) != NotEquals (2) If both operands are numbers The return value is a boolean representing whether the first equals the second. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is a boolean representing whether the first equals the second. If one or both operands are strings : The non-string operand is converted to its string representation (numbers as their decimal representation, true becomes \"true\" and false becomes \"false\" ) The return value is the equality between strings. If one of the operands is a List or a List Item : It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. The return value is a boolean that is true if and only if all elements from the first List are in the second List and all elements from the second List are in the first List . NotEquals always returns the inverse of Equals > Greater (2) < Less (2) >= GreaterThanOrEquals (2) <= LessThanOrEquals (2) If both operands are numbers The return value is a boolean representing how the first compares to the second. If both operands are booleans, or if a boolean is added to a number : true is converted to 1 and false to 0 The return value is a boolean representing how the first compares to the second. Comparisons can't be applied to strings. If one of the operands is a List or a List Item It can't be mixed with non-list operands. All List Item operands are considered as a List with only their item. > is true between Lists if the value of the smallest element of the first List is strictly greater than the value of the biggest element of the second List . >= is true between Lists if the value of the smallest element of the first List is greater or equal than the value of the smallest element of the second List and if the value of the biggest element of the first List is greater or equal than the value of the biggest element of the second List . < is true between Lists if the value of the biggest element of the first List is strictly less than the value the smallest element of the second List . <= is true between Lists if the value of the biggest element of the first List is less or equal than the value of the biggest element of the second List and if the value of the smallest element of the first List is less or equal than the value of the smallest element of the second List . ! Not (1) If the operand is a number : Returns true if its value is not zero. If the operand is a boolean Returns the opposite. If the operand is a List : Returns true if its count is not 0. Not can't be applied to strings. && And (2) || Or (2) All non-boolean operands are first converted to boolean non-zero number, non-empty Lists and non-empty strings are converted to true otherwise to false The return value is the result of the boolean. MIN Min (2) MAX Max (2) POW Pow (2) FLOOR Floor (1) CEILING Ceiling (1) INT Int (1) FLOAT Float (1) ? Has (2) !? Hasn't (2) L^ or ^ Intersect (2) LIST_MIN ListMin (1) LIST_MAX ListMax (1) LIST_ALL All items (1) LIST_COUNT Count (1) LIST_VALUE ValueOfList (1) LIST_INVERT Invert (1)","title":"List of all native functions"},{"location":"state-saving-and-restoration/","text":"State Saving & Restoration Explanation of how the ink runtime stores the state after each execution","title":"State Saving & Restoration"},{"location":"state-saving-and-restoration/#state-saving-restoration","text":"Explanation of how the ink runtime stores the state after each execution","title":"State Saving &amp; Restoration"},{"location":"testing/","text":"Testing your runtime The community standard for testing a runtime is to use chromy/ink-proof . This tool provides conformance testing for ink runtimes through an easy-to-use web interface & shim structure.","title":"Testing your runtime"},{"location":"testing/#testing-your-runtime","text":"The community standard for testing a runtime is to use chromy/ink-proof . This tool provides conformance testing for ink runtimes through an easy-to-use web interface & shim structure.","title":"Testing your runtime"},{"location":"variables/","text":"Variables a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary.","title":"Variables"},{"location":"variables/#variables","text":"a reference to a slot in the evaluation stack. It may contains a Value, a StringValue or a Divert. It may be global or temporary.","title":"Variables"}]}